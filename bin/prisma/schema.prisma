// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
	provider = "postgresql"
	url = "DATABASE_URL"
}
generator client {
	provider = "prisma-client-js"
}
model Apple {
	seeds Int 
	core String @id
}
model User {
	id Int @unique @default(autoincrement())
	createdAt DateTime @default(now())
	email String @unique
	name String? 
	password String 
	role Role 
	/// @onDelete(CASCADE)
	posts Post[] @relation(name: "PostToUser")
	group Group? @relation(name: "GroupToUser", fields: [groupId], references: [id])
	groupId Int? 
	/// @onDelete(SET_NULL)
	comments Comment[] @relation(name: "CommentToUser")
	whale String 
	cat String 
	@@id([id, email])
}
model Post {
	id Int @unique @default(autoincrement())
	published Boolean @default(false)
	title String 
	author User? @relation(name: "PostToUser", fields: [authorId], references: [id])
	authorId Int? @unique
	/// @onDelete(CASCADE)
	comments Comment[] @relation(name: "CommentToPost")
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}
model Comment {
	id Int @id @default(autoincrement())
	contain String 
	post Post @relation(name: "CommentToPost", fields: [postId], references: [id])
	postId Int 
	author User? @relation(name: "CommentToUser", fields: [authorId], references: [id])
	authorId Int? 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}
model Group {
	id Int @id @default(autoincrement())
	name String 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	/// @onDelete(SET_NULL)
	users User[] @relation(name: "GroupToUser")
}
enum Role {
	USER
	ADMIN
}